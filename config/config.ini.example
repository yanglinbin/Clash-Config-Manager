[proxy_providers]
# 代理提供者配置
# 格式: 配置名称 = 订阅URL
# 示例:
# PROVIDER1 = http://your-subscription-url-1
# PROVIDER2 = https://your-subscription-url-2
# PROVIDER3 = https://your-subscription-url-3

[regions]
# 地区关键词配置，用于自动分组
# 格式: 地区名称 = emoji,匹配关键词1,匹配关键词2
香港 = 🇭🇰,Hong Kong,HK,港,HongKong
台湾 = 🇹🇼,Taiwan,TW,台,Taipei
日本 = 🇯🇵,Japan,JP,日,Tokyo
美国 = 🇺🇸,United States,US,美,America,USA
新加坡 = 🇸🇬,Singapore,SG,新,狮城

[filter]
# 节点过滤规则
# 包含以下关键字的节点将被排除，不会出现在自动选择组中
exclude_keywords = 网址,剩余,流量,重置,套餐,如遇,永久,官方,群组,欢迎,官网,频道,个人,到期,续费

[server]
# 更新间隔（秒）
update_interval = 3600

# GitHub Webhook 密钥（请修改为强密码）
webhook_secret = your_webhook_secret_here_change_this

[files]
# 配置文件路径
rules_config = config/rules.yaml

[clash]
# Clash 基础配置
port = 7890
socks_port = 7891
allow_lan = true
mode = Rule
log_level = info
external_controller = :9090
test_url = http://connectivitycheck.gstatic.com/generate_204

# 是否为所有提供者生成所有地区组（false=只生成指定的组合）
generate_all_region_groups = false

# 使用合并的地区组（将所有提供者的同地区节点合并到一个组）
# true=合并地区组（推荐），false=按提供者分组
use_merged_region_groups = true

[provider_regions]
# 指定每个提供者支持的地区（如果 generate_all_region_groups=false）
# 格式: 提供者名称 = 地区1,地区2,地区3
# 如果不指定，则生成所有地区组
XXAI = 香港,台湾,日本,美国,新加坡
NAIYUN = 香港,台湾,日本,美国
KITTY = 香港,日本,美国,新加坡

[merged_regions]
# 合并地区组配置（仅当 use_merged_region_groups=true 时生效）
# 格式: 地区名称 = 代理组类型
# 类型说明:
#   select          - 手动选择（完全用户控制，最稳定）
#   url-test        - 自动选择低延迟节点（可能频繁切换）
#   fallback        - 故障转移（推荐：只在节点失败时切换，连接稳定）
#   load-balance    - 负载均衡（适合下载，但会破坏会话）

# 默认类型（如果某个地区未单独配置）
default_type = fallback

# 各地区配置（可以为不同地区配置不同类型）
香港 = fallback
台湾 = fallback
日本 = fallback
美国 = fallback
新加坡 = fallback

[custom_groups]
# 自定义节点组配置
# 可以为特定用途创建专用节点组，自由指定使用的提供者和地区
# 格式: 组名 = emoji, 类型, 提供者列表, 地区列表
# 
# 参数说明:
#   组名         - 节点组的名称（会在前面加上 emoji）
#   emoji        - 显示在组名前的图标
#   类型         - select/fallback/url-test/load-balance
#   提供者列表   - 用 | 分隔，如 XXAI|NAIYUN（留空表示使用所有提供者）
#   地区列表     - 用 | 分隔，如 香港|日本|美国（会匹配这些地区的所有节点）
#
# 使用场景:
#   - AI 平台专用节点（需要稳定 IP，建议 fallback）
#   - 特定地区组合（如亚洲节点 = 香港|日本|新加坡）
#   - 高质量节点精选（只使用特定提供者的特定地区）

# 示例 1: AI 专用节点（稳定性优先，避免频繁切换导致验证）
AI专用 = 🤖, fallback, XXAI|NAIYUN, 香港|日本|美国

# 示例 2: 游戏专用节点（低延迟优先）
# 游戏专用 = 🎮, url-test, XXAI, 香港|日本

# 示例 3: 香港负载均衡组（速度优先，使用所有提供者，一致性哈希策略）
# 香港负载均衡 = 🇭🇰, load-balance, , 香港

# 示例 4: 下载专用节点（使用所有提供者的香港和美国节点）
# 下载专用 = ⬇️, load-balance, , 香港|美国
